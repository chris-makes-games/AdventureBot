main
  register
  new adventure(command, now checks to see if the player has a edit adventure already, , then it checks that the player is in the example adventure,   if both do not exist it then makes a new adventure in testadventures and makes a thread then it looks for the thread id for the edit adventure and logs the information on the players user database )
database
  register_channel
  create blank adventure ( turns into a object and inserts one)

---------------------------------------------------------------

  changes made post valentines:
  - command folder loader is now working! Commands need to be transferred to the folder one at a time and fixed/tested.
          old commands transferred and working:
              - newplayer
              - deleteplayer
              - join
              - register
              - create
              - deleteroom
              - deleteitem
  - added /load, /unload, and most importantly /reload. Reload allows the bot to unload and reload a command, getting any updates from the file if it has been changed. This does not require a discord app restart or bot restart.
  - I saw a few new classes created in main.py, they seemed to be trying to create confirmation buttons when a player tries different commands but they were not formatted correctly. There is also already a confirm button class (database.ConfirmButton) which performs the desired functionality. I deleted the button classes in main and did some cleanup around them to make the code executable.
(in general, no classes should be getting defined at the bottom of main. For organization purposes, classes should have their own file and then import to main. I have a few custom classes in database but they need to be in database to access other functions.)
  - Removed kill command and confirm kill button (not really relevant to current design goals, need to create a command to leave an adventure without deleting player data)
  - Removed !combine and !deconstruct for items. Moved to old_code. Need to create a new inventory manager embed
  - There was a second /join method under construction, also with errors. The new intended functionality of /join isnt to create a new player but to join a new adventure. Deleted the duplicate /join and updated the old one to be a slash command. Moved the autocomplete for join up to be next to the method. Edited the old join command so that it works as intended, still needs testing.
  - Updated the deleteitem slash command. It was previously trying to use the broken ConfirmDeleteItem class, which was deleted. Instead, it now uses the database.confirm_embed class and sends the item data there to be deleted upon confirmation.
  - Updated deleteroom slash command same as deleteitem, and fixed the autocomplete function for it. Still needs some testing, I dunno if the AI did the regex correctly.
  - Removed the /info command. It doesn't really serve a purpose anymore. Kept it in old_code.txt just in case.
  - Added /newplayer command. This does what old !join does. Someone can use this to add their own player info to the database, needs testing!
  - Added /deleteplayer command, needs testing!
  - Added/changed a few parameters to the player class:
      - channel is now channels, a list of channels
      - added guilds, to see where the player is playing
      - current_adventure is removed
      - game_thread is now game_threads, a list
      - edit_thread is now a single int, changed from string
  - Added a few parameters to the adventure class:
      - Rooms is now a list of strings of room IDs
      - Epilogue boolean to determine if dead players can explore the adventure
      - cleaned up adventure and removed tree/mapping stuff
  - Fiddled around with a mapper to make a map, had some success.
  - added perms_ctx and perms_interactions in order to streamline permissions checks for different permissions and add more in the future as needed.
      - can now check for roles
      - can check for maintainer (new admin role)
      - can check for assistant (secondary admins)
      - can check for correct threads as well
  - perms_interactions created just in case
  - added documents to botinfo database for bot maintainers and bot assistants, who will have access to most commands for testing purposes.
      - /newmaintainer and /newassistant to add new people to that document in botinfo
  - /activate and /deactivate commands now allow maintainers to turn off certain bot commands
  - sync added as its own command, syncs the bot tree
