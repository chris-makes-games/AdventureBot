#replies with the description of the current room to the player
@bot.tree.command(name= "info", description= "Learn about the room you are in")
async def info(interaction: discord.Interaction):
  truename = interaction.user.id
  player = database.get_player(truename)
  if player:
    if player["alive"]:
        room_name = player["room"]
        all_items = player["inventory"]
        new_items = []
        room = database.get_room(room_name)
    else:
      await interaction.response.send_message("You are either dead or not in a adventure!")
      return
    if room:
      tuple = database.embed_room(all_items, new_items, room["displayname"], room)
    else:
      return
    embed = tuple[0]
    view = tuple[1]
    await interaction.response.send_message(embed=embed, view=view)



@bot.command()
async def blankadventure(ctx):
  truename = ctx.author.id
  name = ctx.author.display_name
  try:
    database.create_blank_adventure(truename)
    embed = formatter.blank_embed(name, "Success", "Adventure was created", "green")
  except Exception as e:
    embed = formatter.blank_embed(name, "Error", str(e), "red")
  await ctx.reply(embed=embed)

#removes players from the database
@bot.command()
async def leave(ctx):
  truename = ctx.author.id
  name = ctx.author.display_name
  player = database.get_player(truename)
  if player:
    channel = bot.get_channel(player["channel"])
    tuple = await database.confirm_embed("Leaving the game will delete all of your data and delete this thread. Click *Yes* to continue or *No* to cancel:", "leave" , channel)
    embed = tuple[0]
    view = tuple[1]
  else:
    embed = formatter.embed_message(name, "Error", "notplayer" , "red")
    view = discord.ui.View()
  await ctx.send(embed=embed, view=view)
  await ctx.message.delete()

  #allows admin to add new architects
  @bot.command()
  async def architect(ctx, disc=None):
    roles = ctx.author.roles
    name = ctx.author.display_name
    truename = ctx.author.id
    if disc is None:
      embed = formatter.embed_message(name, "Error", "needuser", "red")
      await ctx.reply(embed=embed)
      return
    else:
      id = disc[2:-1] if disc else 'ERROR'
      arch_true = database.get_player_info(id, "architect")
    if not player_architect(roles):
      embed = formatter.embed_message(name, "Error", "notarchitect", "red")
    elif arch_true:
      embed = formatter.embed_message(name, "Error", "alreadyarchitect", "red")
    else:
      dict = {"disc": truename,"architect": True}
      database.update_player(dict)
      embed = formatter.embed_message(name, "Success", "newarchitect", "green")
    await ctx.reply(embed=embed)

  #takes the path chosen by the player into the next room
  #if the player is dead, rejects message
  @bot.command()
  async def path(ctx, exit):
    truename = ctx.author.id
    name = ctx.author.display_name
    try:
      trueexit = int(exit) - 1 #makes sure the exit is valid int
    except Exception as e:
      embed = formatter.embed_message(name, "Error", "exitformat", "red")
      print(e)
      await ctx.reply(embed=embed)
      return
    room = database.get_player_room(truename) #current room
    all_items = database.get_player_info(truename, "inventory")
    taken = database.get_player_info(truename, "taken")
    if taken is None:
      taken = []
    if room is None: #should not fire unless player is broken
      print("Error - Room is None!")
      embed = formatter.embed_message(name, "Error", "noroom", "red")
      await ctx.reply(embed=embed)
      return
    #if player exists and is alive
    if database.get_player(truename) and player_alive(truename) and room:
      #is the exit is valid
      if database.check_valid_exit(truename, trueexit):
        newroomname = room["exit_destination"][trueexit]
        newroom = database.get_room(newroomname)
        new_items = []
        #if the room has an item in it
        if newroom and newroom["items"]:
          items_list = give_player_items(newroom, all_items, taken)
          new_items = items_list[0]
          all_items = items_list[1]
        dict = {"disc": truename,"room": newroomname, "inventory": all_items, "taken": taken}
        database.update_player(dict)
        tuple = formatter.embed_room(all_items, new_items, "You enter the " + newroomname, newroom, "purple")
        embed = tuple[0]
        view = tuple[1]
      else:
        embed = formatter.embed_message(name, "Path Blocked", "exitblocked", "red")
        await ctx.reply(embed=embed)
        return
    else:
      print("Error - Player is dead or not in a room!")
      embed = formatter.embed_message(name, "Error", "exitformat", "red")
      await ctx.reply(embed=embed)
      return
    await ctx.reply(embed=embed, view = view)

  #allows player to kill themselves... for testing purposes
  @bot.command()
  async def kill(ctx):
    truename = ctx.author.id
    dict = {"disc": truename,"alive": False}
    database.update_player(dict)
    await ctx.reply(ctx.author.mention + " you died!")

  #returns a list of the truenames of items for the player
  @bot.command()
  async def inventory(ctx):
    truename = ctx.author.id
    real_items = database.get_player_info(truename, "inventory")
    embed = formatter.inventory(real_items)
    await ctx.reply(embed=embed)


#allows any player to start a new adventure
#really only makes a new room, adding that room to adventures
@bot.command()
async def newadventure(ctx, adventure_name):
  roles = ctx.author.roles
  if not player_architect(roles):
    embed = formatter.embed_message(ctx.author.display_name, "Error", "notarchitect", "red")
    await ctx.reply(embed=embed)
    return
  name = ctx.author.display_name
  adventure_name = adventure_name.lower()
  adventures = database.get_adventures()
  adventure_names = []
  for adventure in adventures:
    adventure_names.append(adventure["name"])
  if adventure_name in adventure_names:
    embed = formatter.embed_message(name, "Error", "adventureexists", "red")
    await ctx.reply(embed=embed)
    return
  pass

@bot.command()
async def adventures(ctx):
  guild = ctx.guild
  adventures = database.get_adventures()
  adventure_names = []
  descriptions = []
  authors = []
  for adventure in adventures:
    adventure_names.append(adventure["name"])
    descriptions.append(adventure["description"])
    author = guild.get_member(adventure["author"])
    authors.append(author.display_name)
  embed = discord.Embed(title="Adventures", description="These are the adventures you can join. Use !join <name of the adventure> to start the test adventure. More adventures will be available later!", color=0x00ff00)
  for i in range(len(adventure_names)):
    embed.add_field(name=adventure_names[i].title(), value=descriptions[i] + "\nCreated by: " + authors[i], inline=False)
  await ctx.reply(embed=embed)
  return


  #test slash commands
@bot.tree.command(name= "hello")
async def hello(interaction: discord.Interaction):
    await interaction.response.send_message(f"Hey {interaction.user.name}! This is a slash command")
@bot.tree.command(name= "say", description= "Make the bot say something")
@app_commands.describe(thing_to_say = "What should I say?") 
async def say(interaction: discord.Interaction, thing_to_say: str):
    await interaction.response.send_message(f"{interaction.user.name} said: '{thing_to_say}'")
  #real slash commands


#main method
@bot.command()
async def newroom(ctx):
  truename = ctx.author.id
  name = ctx.author.display_name
  try:
    database.create_blank_room(truename)
    embed = formatter.blank_embed(name, "Success", "Room was created", "green")
  except Exception as e:
    embed = formatter.blank_embed(name, "Error", str(e), "red")
  await ctx.reply(embed=embed)

#main method
  @bot.command()
  async def newitem(ctx):
    name = ctx.author.display_name
    try:
      database.create_blank_item()
      embed = formatter.blank_embed(name, "Success", "Item was created", "green")
    except Exception as e:
      embed = formatter.blank_embed(name, "Error", str(e), "red")
    await ctx.reply(embed=embed)

#inefficiant way of determining player alive
def player_alive(name):
player = database.get_player(name)
if player:
  return player["alive"]
else:
  return None

inefficient way of determining player admin status
def player_architect(roles):
role_names = []
for role in roles:
  role_names.append(role.name)
return 'architect' in role_names