

#edit item no longer applies
@bot.tree.command(name="edititem", description="Edit item properties")
@app_commands.describe(itemid="The ID of the item to edit", field="The property to edit", value="The new value for the property")
@app_commands.choices(field=[
    # Assuming these are the fields for the items you can edit
    app_commands.Choice(name="displayname", value="displayname"),
    app_commands.Choice(name="description", value="description"),
    # Add more fields here as necessary...
])
async def edititem(interaction: discord.Interaction, itemid: str, field: app_commands.Choice[str], value: str):
    # Retrieve item information from the database
    item = database.testitems.find_one({"itemid": itemid})
    if item:
        # Check if the author's ID (assuming an 'author' field exists in your item schema) matches the one stored in the database
        if interaction.user.id == item.get("author"):
            # Update information in the database
            match field.value:
                case "displayname":
                    val = value
                case "description":
                    val = value

                # Add more cases here as necessary...
                case _:
                    await interaction.response.send_message("Invalid field.")
                    return
            result = database.testitems.find_one_and_update(
                {"itemid": itemid},
                {"$set": {field.value: val}},
                return_document=True
            )
            if result:
                # Display the updated item information
                embed = discord.Embed(title=f"Item '{result.get('displayname', 'Unnamed Item')}'", description="The item has been updated.", color=0x00ff00)
                # Add all relevant fields to display
                fields_to_display = ["displayname", "description"]  # Add more as necessary...
                for field_name in fields_to_display:
                    embed.add_field(name=field_name, value=str(result.get(field_name, "Not Available")), inline=False)
                await interaction.response.send_message(embed=embed)
            else:
                await interaction.response.send_message("Item not found in the database.")
        else:
            await interaction.response.send_message("You don't have permission to edit this item.")
    else:
        await interaction.response.send_message("Item not found in the database.")
# Autocompletion for itemid parameter
@edititem.autocomplete('itemid')
async def autocomplete_itemid(interaction: discord.Interaction, current: str):
    # Modify the query to also return the displayname field
    item_ids_query = database.testitems.find(
        {"author": interaction.user.id, "itemid": {"$regex": re.escape(current), "$options": "i"}},
        {"itemid": 1, "displayname": 1, "_id": 0}
    )
    # Create a list of tuples where each tuple contains the item ID and display name
    item_ids = [(item["itemid"], item["displayname"]) for item in item_ids_query]
    # Create a list of choices where each choice has the item ID as the value and the display name as the name
    return [app_commands.Choice(name=f"{item_id} - {displayname}", value=item_id) for item_id, displayname in item_ids[:25]]

@bot.tree.command(name="editroomarrays", description="Edit array fields of a room")
@app_commands.choices(field=[
    app_commands.Choice(name="exits", value="exits"),
    app_commands.Choice(name="exit_destination", value="exit_destination"),
    app_commands.Choice(name="secrets", value="secrets"),
    app_commands.Choice(name="unlockers", value="unlockers"),
])
async def editroomarrays(interaction: discord.Interaction, roomid: str, field: str, values: str):
          # Split the incoming values by comma to create a list of strings
          values_list = values.split(",")
          # Validation of input parameters
          if not roomid or not field or not values_list:
              await interaction.response.send_message("Invalid input parameters.")
              return
          # Process updates for a single array field
          array_fields = ["exits", "exit_destination", "secrets", "unlockers"]
          if field.lower() in array_fields:
              # Update information in the database
              result = database.testrooms.find_one_and_update(
                  {"roomid": roomid},
                  {"$set": {field.lower(): values_list}},  # Changed from $push to $set for overwriting the list
                  return_document=True
              )
              if result:
                  # Display the updated room information for the array field
                  embed = discord.Embed(title=result["roomid"], description="Here you can see the updates to this room.", color=0x00ff00)
                  embed.add_field(name=field, value="\n".join(result.get(field.lower(), [])), inline=True)
                  await interaction.response.send_message(embed=embed)
              else:
                  await interaction.response.send_message("Room not found in the database.")
          else:
              await interaction.response.send_message("Invalid array field. Supported fields: exits, exit_destination, secrets, unlockers")

# Autocompletion for roomid parameter in editroomarrays
@editroomarrays.autocomplete('roomid')
async def autocomplete_roomid_arrays(interaction: discord.Interaction, current: str):
    # Modify the query to also return the displayname field
    room_ids_query = database.testrooms.find(
        {"author": interaction.user.id, "roomid": {"$regex": re.escape(current), "$options": "i"}},
        {"roomid": 1, "displayname": 1, "_id": 0}
    )
    # Create a list of tuples where each tuple contains the room ID and display name
    room_ids = [(room["roomid"], room["displayname"]) for room in room_ids_query]
    # Create a list of choices where each choice has the room ID as the value and the display name as the name
    return [app_commands.Choice(name=f"{rid} - {displayname}", value=rid) for rid, displayname in room_ids[:25]]

@bot.tree.command(name="exampleroom", description="Show an example room")
async def exampleroom(interaction: discord.Interaction, roomid: str):
  # Retrieve information from the database
  result = database.testrooms.find_one({"roomid": roomid })
  if result:
    embed = discord.Embed(title=result["roomid"], description="this is the example.", color=0x00ff00)
    fields = ["displayname", "description", "kill","URL", "items"]
    arrayfields = ["exits", "exit_destination"] 
    arrayfieldss = ["secrets", "unlockers"]
    for field in fields: 
      embed.add_field(name= field, value=result[field], inline=False)
    for field in arrayfields: 
      embed.add_field(name= field, value="\n".join(result[field]), inline=True)
    for field in arrayfieldss: 
      embed.add_field(name= field, value="\n".join(result[field]), inline=True)
    await interaction.response.send_message(embed=embed)
    followup_message = "**/exampleroom**  **exampleroom1** to see a reference on what each section of the room is for. **/exampleroom**  **exampleroom2** to see a reference on what the code will look like when updating the fields that are strings( roomid displayname description kill URL item ). **/exampleroom** **exampleroom3** to see how to update the arrays( exits exit_destination secrets unlockers) Use **/exampleroom** + **exampleroom4** to see the last master example room. To view any of the rooms shown in the Example Adventure, Simply use the roomid as follows **/exampleroom**  **roomid**.\nAlso you should /join the **Example Adventure** to see step by step visuals on how to edit rooms. This will also show you the players perspective when they play your adventure you are creating."
    await interaction.followup.send(followup_message)
  else:
    await interaction.response.send_message("Room not found in the database.")

# Autocompletion function for roomid in exampleroom command
@exampleroom.autocomplete('roomid')
async def autocomplete_exampleroom(interaction: discord.Interaction, current: str):
    # Modify the query to also return the displayname field
    example_room_ids_query = database.testrooms.find(
        {},
        {"roomid": 1, "displayname": 1, "_id": 0}
    )
    # Create a list of tuples where each tuple contains the room ID and display name
    example_room_ids = [(room["roomid"], room["displayname"]) for room in example_room_ids_query]
    # Filter the room IDs based on the current input
    filtered_room_ids = [(roomid, displayname) for roomid, displayname in example_room_ids if current.lower() in roomid.lower()]
    # Create a list of choices where each choice has the room ID as the value and the display name as the name
    return [app_commands.Choice(name=f"{roomid} - {displayname}", value=roomid) for roomid, displayname in filtered_room_ids[:25]]

#returns a list of the truenames of items for the player
@bot.tree.command(name= "inventory", description= "View your inventory")
async def inventory(interaction: discord.Interaction):
    truename = interaction.user.id
    real_items = database.get_player_info(truename, "inventory")
    player = database.get_player(truename)
    embed = formatter.inventory(real_items)
    if player and player["alive"]:
      await interaction.response.send_message(embed=embed)
    else :
      await interaction.response.send_message("You are either dead or not in a adventure!")

#injests items a room has, player inventory, player taken
#determines if the player needs to be given the item
#prevents duplicate items, returns a tuple
def give_player_items(new_items, old_items, taken):
  items_grouping = [new_items, old_items, taken]
  for item in new_items:
    item_object = None
    item_object = items.find_one({"itemid" : item})
    if not item_object:
      print("ERROR - Room item not found!")
      print(str(item) + " does not exist as an item name")
      continue
    elif item in taken and not item_object["infinite"] or item in old_items:
      new_items.remove(item)
      continue
    elif item_object["infinite"] and item not in old_items:
      if item not in taken:
        taken.append(item)
      old_items.append(item)
    elif item not in old_items and item not in taken:
      taken.append(item)
      old_items.append(item)
    else:
      new_items.remove(item)
  pp("New Items:" + str(items_grouping))
  return items_grouping

import re

import discord
from discord import app_commands
from discord.ext import commands

import database
import perms_ctx as permissions


#deletes an item from the database
@commands.hybrid_command(name="deleteitem", description="Delete an item by its ID")
async def deleteitem(ctx, item_id: str):
  item = database.items.find_one({"itemid": item_id})
  if not item:
    await ctx.reply("Error: Item not found! Double check your item ID!", ephemeral=True)
    return
  if ctx.author.id == item["author"] or permissions.is_maintainer:
    confirm = await database.confirm_embed(confirm_text=f"This will delete the item {item['name'].title()} permenantly, are you sure you want to do this?", title="Confirm Item Deletion", action="delete_item", channel=ctx.channel, id=item_id)
    embed = confirm[0]
    view = confirm[1]
    await ctx.reply(embed=embed, view=view, ephemeral=True)
  else:
    await ctx.reply("Error: You do not have permission to delete this item!", ephemeral=True)

@deleteitem.autocomplete('item_id')
async def autocomplete_item_id_deletion(interaction: discord.Interaction, current: str):
  #checks if author is maintainer, finds every room
  if database.check_permissions(interaction.user.id)[0]:
    item_ids_query = database.items.find(
  { 
  "itemid": {"$regex": re.escape(current), "$options": "i"}
  },
  {
  "itemid": 1,
  "_id": 0
  }
  )
    item_ids = [item["itemid"] for item in item_ids_query.limit(25)]
    return [app_commands.Choice(name=item_id, value=item_id) for item_id in item_ids]
  #if not maintainer, shows only their items
  else:
    item_ids_query = database.items.find(
  {
  "author": interaction.user.id, 
  "itemid": {"$regex": re.escape(current), "$options": "i"}
  },
  {
  "itemid": 1,
  "_id": 0
  }
  )
    item_ids = [item["itemid"] for item in item_ids_query.limit(25)]
    return [app_commands.Choice(name=item_id, value=item_id) for item_id in item_ids]

async def setup(bot):
  bot.add_command(deleteitem)

from discord.ext import commands
import database
import formatter

#Makes a new blank item in the database
@commands.hybrid_command(name= "newitem", description= "Create a new item")
async def newitem(ctx):
  author_id = ctx.author.id
  name = ctx.author.display_name
  try:
    database.create_blank_item(author_id)
    embed = formatter.blank_embed(name, "Success", "Item was created", "green")
  except Exception as e:
    embed = formatter.blank_embed(name, "Error", str(e), "red")
    await ctx.reply(embed=embed, ephemral=True)

async def setup(bot):
  bot.add_command(newitem)

import database


class Item:
    def __init__(self, itemid=None,
          displayname="", subitems=None, author=None, 
          description="", 
          infinite=False, deconstructable=False, dict=None):

      if dict is not None:
        if not itemid:
          self.itemid = database.generate_unique_id()
        for key, value in dict.items():
            setattr(self, key, value)
        if self.displayname == "":
          self.displayname = "NO DISPLAY NAME GIVEN"
        if self.description == "":
          self.description = "NO DESCRIPTION GIVEN"
        if author is None:
          self.author = "INVALID AUTHOR"
      else:
        self.itemid = database.generate_unique_id()
        self.author = author
        self.displayname = displayname
        self.description = description
      
      self.infinite = infinite
      self.deconstructable = deconstructable
      self.subitems = subitems
      if subitems is None:
        self.subitems = []

import discord
from discord import app_commands
from discord.ext import commands

import database
import perms_ctx as permissions

#create mode wasnt able to function with modals
#creation mode for adding anything new or editing rooms
#edits one adventure at a time
#works similar to join, creates a private thread
@commands.hybrid_command(name="create", description="Begins creation mode for an adventure")
async def create(ctx, adventure_name: str):
  #check if player can create an adventure
  #using architect as a role to check for now
  if not permissions.has_role(ctx, "architect") and not permissions.check_any_admin(ctx):
    await ctx.reply("You do not have permission to edit an adventure!", ephemeral=True)
    return
  player = database.get_player(ctx.author.id)
  if not player:
    await ctx.reply("You are not registered as a player! You must use /newplayer to begin", ephemeral=True)
    return
  if player and player["edit_thread"]:
    thread = ctx.guild.get_channel_or_thread(player["edit_thread"])
    if not thread:
      await ctx.reply("It looks like you were editing an adventure in a channel that no longer exists. Your old editing thread is being closed...", ephemeral=True)
      player.update({"edit_thread": None})
      database.update_player(player)
    else:
      message_link = f"https://discord.com/channels/{ctx.guild.id}/{thread.id}/{thread.last_message_id}"
      await ctx.reply(f"You are already in the middle of editing an adventure! Click here to go there:\n{message_link}\nIf the link is broken, contact a moderator!", ephemeral=True, suppress_embeds=True)
      return
  displayname = ctx.author.display_name
  channel = ctx.channel
  all_adventures = list(database.get_adventures())
  #if adventure name is not an available adventure name
  #checks if the name matches any of the adventure names
  if adventure_name not in [adv["name"] for adv in all_adventures]:
    embed = discord.Embed(title="Error - No Adventure", description="There's no adventure by that name. Refer to this list of available adventures to edit:", color=discord.Color.red())
    for adventure in all_adventures:
      embed.add_field(name=adventure["name"].title(), value=adventure["description"], inline=False)
    embed.set_footer(text="If there is a different error, contact a moderator")
    await ctx.reply(embed=embed, ephemeral=True)
    return
  #if adventure name is an available adventure name
  else:
    thread = await channel.create_thread(name=displayname + " editing " + adventure_name)
    thread_channel = ctx.bot.get_channel(thread.id)
    tuple = await database.creation_mode(thread_channel)
    embed = tuple[0]
    view = tuple[1]
    await thread.send(ctx.author.mention + "Create mode started:",embed=embed, view=view)
    message_link = f"https://discord.com/channels/{ctx.guild.id}/{thread.id}"
    await ctx.reply(f"You have begun creation mode for **{adventure_name.title()}**! Go to the new thread to begin:\n{message_link}", ephemeral=True , suppress_embeds=True)
    player = database.get_player(ctx.author.id)
    if player:
      player.update({"edit_thread": thread.id})
      database.update_player(player)

# Autocompletion function for adventure_name in join command
@create.autocomplete('adventure_name')
async def autocomplete_join(interaction: discord.Interaction, current: str):
    adventures_query = database.get_adventures()
    possible_adventures = [adv["name"] for adv in adventures_query if current.lower() in adv["name"].lower()]
    return [app_commands.Choice(name=adv_name, value=adv_name) for adv_name in possible_adventures[:10]]

async def setup(bot):
  bot.add_command(create)